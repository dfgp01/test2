#2015.04.13

Unit类的group、mask说明：
数据格式为二进制，group用于碰撞检测的逻辑判断，mask用于AttackActionState和Unit的攻击类型判断。

group用例：1、2、4、8等，是组号
mask用例：1为普通击退，2为普通击飞等

//主循环逻辑

unitLoop(){
	if(unlock){
		unit.run();
		unit.checkFloor();
	}
}
cmdClear(){}

#2015.04.16

//使用数据建模

handler和mask:
handler处理source和target列表的mask关系，unitA->(unitB, unitC)，mask分别为 0001, 0010, 0100
A和B.C分别做逻辑运算：A|B A|C = 0011, 0101
Map中存储 0011, 0101 分别对应两种操作。


###	主要逻辑说明		###

1.主体结构简单说明:
1.1	service层：
			Factory类：构建组件并添加到Container容器中
			Container类：主容器类，存储初始化后的组件到内存中，便于重新构建，不需再读文件。
			Pool类：对象池，用于主循环时对象复用，和Container不同概念。Container存储定义，Pool存储对象。
			Util类：工具类，提供通用方法。
			
1.2	action层：
			ActionState类：继承自StateNode，每个unit拥有多个，负责播放动画和相关逻辑，拥有下级节点。
			AttackActionState类：继承自ActionState类，负责攻击动作，有矩形信息、关键帧和处理器等属性。
			
1.3	unit层：
			Unit类：主体类，负责显示精灵，操作各种action，以及和其他unit互动。此类要和cocos2d中的sprite联合
			
2. 互动逻辑方案：
2.1	UnitGroup和公共ActionState：公共ActionState是为了避免action和unit出现笛卡尔积的情况而设计的一种解决方案。
			例：某unit施放一种技能，效果为被击中者上升浮空，如果每个被击中的unit都要创建一个对应的state，那么，还有其他不同效果的技能都要逐一创建，就会形成笛卡尔现象。
			另外，被定义为UnitGroup的也可以创建对应的公共ActionState。
			
2.2	Handler：因不同的攻击方式对不同类型的unit有不同效果。

2.3	JumpAttack的解决方案：有时一个JumpAttack可能会持续好几帧，与现有的AttackAction机制理念不同，需要创建一种多帧的Attack实现。


X(未分类)
独立公共State的合并，markList建立，Handler，群体Action

StateNode	run()		start()
	ActionState	run()		run(unit)	start()	start(unit)
		AttackAction		同上
		WalkAction		同上
		JumpAction		同上
		
####	2015.04.22

1.继续逻辑表的编写
2.对照data.js的数据建模
3.Factory接口优化，所有组件类的new()内部不要实现，由Factory控制
4.ActionState默认获取同名的Action，如有定义action域，则拿action域
5.完善data数据模型。
6.Factory创建unit方法必须完成。
7.代码备份至邮箱。
8.使用GitHub