#2015.04.13

Unit类的group、mask说明：
数据格式为二进制，group用于碰撞检测的逻辑判断，mask用于AttackActionState和Unit的攻击类型判断。

group用例：1、2、4、8等，是组号
mask用例：1为普通击退，2为普通击飞等

//主循环逻辑

unitLoop(){
	if(unlock){
		unit.run();
		unit.checkFloor();
	}
}
cmdClear(){}



###	主要逻辑说明		###

1.主体结构简单说明:
1.1	service层：
			Factory类：构建组件并添加到Container容器中
			Container类：主容器类，存储初始化后的组件到内存中，便于重新构建，不需再读文件。
			Pool类：对象池，用于主循环时对象复用，和Container不同概念。Container存储定义，Pool存储对象。
			Util类：工具类，提供通用方法。
			
1.2	action层：
			ActionState类：继承自StateNode，每个unit拥有多个，负责播放动画和相关逻辑，拥有下级节点。
			AttackActionState类：继承自ActionState类，负责攻击动作，有矩形信息、关键帧和处理器等属性。
			
1.3	unit层：
			Unit类：主体类，负责显示精灵，操作各种action，以及和其他unit互动。此类要和cocos2d中的sprite联合
			
2. 互动逻辑方案：
2.1	UnitGroup和公共ActionState：公共ActionState是为了避免action和unit出现笛卡尔积的情况而设计的一种解决方案。
			例：某unit施放一种技能，效果为被击中者上升浮空，如果每个被击中的unit都要创建一个对应的state，那么，还有其他不同效果的技能都要逐一创建，就会形成笛卡尔现象。
			另外，被定义为UnitGroup的也可以创建对应的公共ActionState。
			
2.2	Handler：因不同的攻击方式对不同类型的unit有不同效果。

2.3	JumpAttack的解决方案：有时一个JumpAttack可能会持续好几帧，与现有的AttackAction机制理念不同，需要创建一种多帧的Attack实现。


X(未分类)
独立公共State的合并，markList建立，Effect，群体Action


###	2015.05.09	###

动作释放类型：瞬发、施放、蓄力、施放后蓄力
动作播放类型：顺播、循环、最后一帧静止、自定义（需逻辑实现）
攻击目标检测：敌军、友军、自身、自身及友军
攻击目标数量：1个、全体(99)、具体数量
攻击方式：一次，固定次数，固定间隔(持续时间)
击中后处理：mask定义具体动作
击中附加处理：函数列表

a punch:
			攻击方：1. hp - 100	2.中毒5s, 每秒-10hp	3. 2%几率晕眩2s
			防御方：1. 物理免疫	2.中毒减轻					3. 反伤10%	4. 10%几率放出2只复仇机器人
		解决方案:
			1.将中毒晕眩等逻辑先忽略。
			2.每个attEffect都运行hurtEffect，再运行state
		
		att传输到hurt的data参考：
		{
			power : 20,
			晕 : {
				jilv: 2%,
				time : 5
			}
		}